// === –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º ===
const basePath = "files/2023/–í–µ–±-–≤–µ—Ä—Å–∏—è –î–∏–ø–ª–æ–º–∞/";
const imageBase = basePath + "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è/";

// === –°–ø–∏—Å–æ–∫ –≥–ª–∞–≤ ===
const files = [
  "10.–û–±–ª–æ–∂–∫–∞-–∏-–ë–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏.md",
  "11.–û–≥–ª–∞–≤–ª–µ–Ω–∏–µ.md",
  "12.–ü–æ—á–µ–º—É-–ë–∏—Ç–∫–æ–π–Ω.md",
  "13.–ì–ª–∞–≤–∞-1.md",
  "14.–ì–ª–∞–≤–∞-2.md",
  "15.–ì–ª–∞–≤–∞-3.md",
  "16.–ì–ª–∞–≤–∞-4.md",
  "17.–ì–ª–∞–≤–∞-5.md",
  "18.–ì–ª–∞–≤–∞-6.md",
  "19.–ì–ª–∞–≤–∞-7.md",
  "20.–ì–ª–∞–≤–∞-8.md",
  "21.–ì–ª–∞–≤–∞-9.md",
  "22.–ì–ª–∞–≤–∞-10.md",
  "23.–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ-–†–µ—Å—É—Ä—Å—ã.md",
  "24.–ì–ª–æ—Å—Å–∞—Ä–∏–π-(–°–ª–æ–≤–∞—Ä—å).md",
  "25.–ü–æ—á–µ–º—É-–≤–∞–∂–Ω–æ-–∑–Ω–∞—Ç—å-–æ-–ë–∏—Ç–∫–æ–π–Ω–µ.md"
];

// === –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–Ω–æ–ø–æ–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ ===
const nav = document.getElementById("lessons-nav");
files.forEach((name, index) => {
  const btn = document.createElement("button");

  const cleanName = name.replace(/^\d+\./, "").replace(".md", "");
  const title = cleanName.replace(/-/g, " ").trim();

  btn.textContent = `${index + 1}. ${title}`;
  btn.onclick = () => loadLesson(name);

  nav.appendChild(btn);
});

// === –ü–æ–¥–∫–ª—é—á–∞–µ–º markdown-–ø–∞—Ä—Å–µ—Ä ===
const script = document.createElement("script");
script.src = "https://cdn.jsdelivr.net/npm/marked/marked.min.js";
script.onload = () => {
  console.log("‚úÖ marked.js –∑–∞–≥—Ä—É–∂–µ–Ω");
  loadLesson(files[0]); // –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–≤—É—é –≥–ª–∞–≤—É
};
document.head.appendChild(script);

// === –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –≥–ª–∞–≤—ã ===
async function loadLesson(filename) {
  const contentDiv = document.getElementById("content");
  contentDiv.innerHTML = `<p>–ó–∞–≥—Ä—É–∑–∫–∞: ${filename}...</p>`;

  try {
    const url = basePath + encodeURIComponent(filename).replace(/%2F/g, "/");
    const res = await fetch(url);
    if (!res.ok) throw new Error(res.statusText);
    let text = await res.text();

    // --- –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—É—Ç–µ–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π ---
    text = text.replace(/!\[([^\]]*)\]\((?!https?:\/\/)([^)]+)\)/g,
      (match, alt, src) => {
        const cleanSrc = src.trim().replace(/^["']|["']$/g, "");
        return `![${alt}](${imageBase}${cleanSrc})`;
      });

    text = text.replace(/<img([^>]+)src=["']([^"']+)["']/gi,
      (match, attrs, src) => {
        let cleanSrc = src.trim().replace(/^["']|["']$/g, "");
        cleanSrc = cleanSrc.replace("../files/2023/–í–µ–±-–≤–µ—Ä—Å–∏—è –î–∏–ø–ª–æ–º–∞/", "");
        cleanSrc = cleanSrc
          .replace(/^–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è\/Images\//, "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è/")
          .replace(/^Images\//, "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è/")
          .replace("Chapter-", "–ì–ª–∞–≤–∞-");

        let fullSrc = cleanSrc;
        if (!cleanSrc.startsWith("http") && !cleanSrc.startsWith("data:")) {
          fullSrc = imageBase + cleanSrc.replace(/^–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è\//, "");
        }

        console.log("üñºÔ∏è –ü–æ–¥—Å—Ç–∞–≤–ª–µ–Ω –ø—É—Ç—å:", fullSrc);
        return `<img${attrs}src="${fullSrc}"`;
      });

    // --- –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ü–≤–µ—Ç–Ω—ã—Ö LaTeX-–º–µ—Ç–æ–∫ ---
    text = text.replace(
      /\$\\color\[RGB\]\{(\d+),(\d+),(\d+)\}([^$]+)\$/g,
      (m, r, g, b, inner) =>
        `<span style="color: rgb(${r},${g},${b}); font-weight:600;">${inner.trim()}</span>`
    );

    // --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Markdown ---
    marked.setOptions({
      mangle: false,
      headerIds: false,
      breaks: false,
    });

    contentDiv.innerHTML = marked.parse(text);

    if (window.MathJax) {
      MathJax.typesetPromise();
    }

  } catch (err) {
    contentDiv.innerHTML = `
      <h2 style="color:red;">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: ${filename}</h2>
      <pre>Error: ${err.message}</pre>`;
  }
}

// === –ü–ª–∞–≤–Ω–∞—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ ===
document.querySelector(".primary")?.addEventListener("click", () => {
  const target = document.getElementById("lessons-nav");
  if (!target) return;

  const startY = window.scrollY;
  const targetY = target.getBoundingClientRect().top + window.scrollY - 15;
  const distance = targetY - startY;
  const duration = 800;
  let startTime = null;

  function animateScroll(currentTime) {
    if (!startTime) startTime = currentTime;
    const timeElapsed = currentTime - startTime;
    const progress = Math.min(timeElapsed / duration, 1);
    const ease = 0.5 * (1 - Math.cos(Math.PI * progress));
    window.scrollTo(0, startY + distance * ease);
    if (progress < 1) requestAnimationFrame(animateScroll);
  }

  requestAnimationFrame(animateScroll);
});

// === –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç—ë–º–Ω–æ–π —Ç–µ–º—ã ===
const themeToggle = document.querySelector(".theme-toggle");
const body = document.body;

if (localStorage.getItem("theme") === "dark") {
  body.classList.add("dark");
  themeToggle.innerHTML = "üåû –°–≤–µ—Ç–ª–∞—è";
} else {
  body.classList.remove("dark");
  themeToggle.innerHTML = "üåô –¢—ë–º–Ω–∞—è";
}

themeToggle.addEventListener("click", () => {
  const isDark = body.classList.toggle("dark");

  if (isDark) {
    localStorage.setItem("theme", "dark");
    themeToggle.innerHTML = "üåû –°–≤–µ—Ç–ª–∞—è";
  } else {
    localStorage.setItem("theme", "light");
    themeToggle.innerHTML = "üåô –¢—ë–º–Ω–∞—è";
  }
});
