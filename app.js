// === –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º ===
const basePath = "files/2023/–í–µ–±-–≤–µ—Ä—Å–∏—è –î–∏–ø–ª–æ–º–∞/";
const imageBase = basePath + "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è/";

// === –°–ø–∏—Å–æ–∫ –≥–ª–∞–≤ ===
const files = [
  "10.–û–±–ª–æ–∂–∫–∞-–∏-–ë–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏.md",
  "11.–û–≥–ª–∞–≤–ª–µ–Ω–∏–µ.md",
  "12.–ü–æ—á–µ–º—É-–ë–∏—Ç–∫–æ–π–Ω.md",
  "13.–ì–ª–∞–≤–∞-1.md",
  "14.–ì–ª–∞–≤–∞-2.md",
  "15.–ì–ª–∞–≤–∞-3.md",
  "16.–ì–ª–∞–≤–∞-4.md",
  "17.–ì–ª–∞–≤–∞-5.md",
  "18.–ì–ª–∞–≤–∞-6.md",
  "19.–ì–ª–∞–≤–∞-7.md",
  "20.–ì–ª–∞–≤–∞-8.md",
  "21.–ì–ª–∞–≤–∞-9.md",
  "22.–ì–ª–∞–≤–∞-10.md",
  "23.–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ-–†–µ—Å—É—Ä—Å—ã.md",
  "24.–ì–ª–æ—Å—Å–∞—Ä–∏–π-(–°–ª–æ–≤–∞—Ä—å).md",
  "25.–ü–æ—á–µ–º—É-–≤–∞–∂–Ω–æ-–∑–Ω–∞—Ç—å-–æ-–ë–∏—Ç–∫–æ–π–Ω–µ.md"
];

// --- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–Ω–æ–ø–æ–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ —Å —á–∏—Å—Ç—ã–º–∏ –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –∏ –Ω—É–º–µ—Ä–∞—Ü–∏–µ–π ---
const nav = document.getElementById("lessons-nav");
files.forEach((name, index) => {
  const btn = document.createElement("button");

  // –£–±–∏—Ä–∞–µ–º —Ü–∏—Ñ—Ä—ã –∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ .md –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
  const cleanName = name.replace(/^\d+\./, "").replace(".md", "");

  // –ó–∞–º–µ–Ω—è–µ–º –¥–µ—Ñ–∏—Å—ã –Ω–∞ –ø—Ä–æ–±–µ–ª—ã
  const title = cleanName.replace(/-/g, " ").trim();

  // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä
  btn.textContent = `${index + 1}. ${title}`;

  // –î–µ–π—Å—Ç–≤–∏–µ –ø—Ä–∏ –∫–ª–∏–∫–µ
  btn.onclick = () => loadLesson(name);

  nav.appendChild(btn);
});


// === –ü–æ–¥–∫–ª—é—á–∞–µ–º markdown-–ø–∞—Ä—Å–µ—Ä ===
const script = document.createElement("script");
script.src = "https://cdn.jsdelivr.net/npm/marked/marked.min.js";
script.onload = () => {
  console.log("‚úÖ marked.js –∑–∞–≥—Ä—É–∂–µ–Ω");
  loadLesson(files[0]); // –∑–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–≤—É—é –≥–ª–∞–≤—É
};
document.head.appendChild(script);

// === –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –≥–ª–∞–≤—ã ===
async function loadLesson(filename) {
  const contentDiv = document.getElementById("content");
  contentDiv.innerHTML = `<p>–ó–∞–≥—Ä—É–∑–∫–∞: ${filename}...</p>`;

  try {
    // --- –ó–∞–≥—Ä—É–∑–∫–∞ Markdown-—Ñ–∞–π–ª–∞ ---
    const url = basePath + encodeURIComponent(filename).replace(/%2F/g, "/");
    const res = await fetch(url);
    if (!res.ok) throw new Error(res.statusText);
    let text = await res.text();

    // --- –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—É—Ç–∏ –≤ Markdown-–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è—Ö ---
    text = text.replace(/!\[([^\]]*)\]\((?!https?:\/\/)([^)]+)\)/g,
      (match, alt, src) => {
        const cleanSrc = src.trim().replace(/^["']|["']$/g, "");
        return `![${alt}](${imageBase}${cleanSrc})`;
      });

    // --- –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—É—Ç–∏ –≤ HTML-—Ç–µ–≥–∞—Ö <img> ---
    text = text.replace(/<img([^>]+)src=["']([^"']+)["']/gi,
      (match, attrs, src) => {
        let cleanSrc = src.trim().replace(/^["']|["']$/g, "");

        // —É–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–π ../files/... –∏–∑ –Ω–∞—á–∞–ª–∞
        cleanSrc = cleanSrc.replace("../files/2023/–í–µ–±-–≤–µ—Ä—Å–∏—è –î–∏–ø–ª–æ–º–∞/", "");

        // –∏—Å–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è
        cleanSrc = cleanSrc
          .replace(/^–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è\/Images\//, "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è/")
          .replace(/^Images\//, "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è/")
          .replace("Chapter-", "–ì–ª–∞–≤–∞-");

        // –µ—Å–ª–∏ –ø—É—Ç—å –Ω–µ –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –∏ –Ω–µ –≤–Ω–µ—à–Ω–∏–π
        let fullSrc = cleanSrc;
        if (!cleanSrc.startsWith("http") && !cleanSrc.startsWith("data:")) {
          fullSrc = imageBase + cleanSrc.replace(/^–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è\//, "");
        }

        console.log("üñºÔ∏è –ü–æ–¥—Å—Ç–∞–≤–ª–µ–Ω –ø—É—Ç—å:", fullSrc);
        return `<img${attrs}src="${fullSrc}"`;
      });

    // --- –≠–º—É–ª–∏—Ä—É–µ–º LaTeX-—Ü–≤–µ—Ç —á–µ—Ä–µ–∑ HTML ---
    text = text.replace(
      /\$\\color\[RGB\]\{(\d+),(\d+),(\d+)\}([^$]+)\$/g,
      (m, r, g, b, inner) => `<span style="color: rgb(${r},${g},${b}); font-weight:600;">${inner.trim()}</span>`
    );


    // --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Markdown ---
    marked.setOptions({
      mangle: false,
      headerIds: false,
      breaks: false,
    });

    // --- –†–µ–Ω–¥–µ—Ä Markdown ---
    contentDiv.innerHTML = marked.parse(text);

    // --- MathJax –æ–±—Ä–∞–±–æ—Ç–∫–∞ ---
    if (window.MathJax) {
      MathJax.typesetPromise();
    }

  } catch (err) {
    contentDiv.innerHTML = `
      <h2 style="color:red;">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: ${filename}</h2>
      <pre>Error: ${err.message}</pre>`;
  }
}
